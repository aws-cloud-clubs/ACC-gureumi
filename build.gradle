plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.2'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.goormy'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

jar {
	manifest {
		attributes(
				'Manifest-Version': '1.0',
				'Main-Class': 'com.goormy.hackathon.HackathonApplication'
		)
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-web'


	implementation platform("io.awspring.cloud:spring-cloud-aws-dependencies:3.0.1")
	implementation 'io.awspring.cloud:spring-cloud-aws-starter-sqs'
	implementation 'com.amazonaws:aws-lambda-java-core:1.2.1'
	implementation 'com.amazonaws:aws-lambda-java-events:3.11.0'
	implementation 'org.springframework.cloud:spring-cloud-function-adapter-aws:4.0.0'
	implementation 'com.fasterxml.jackson.core:jackson-databind'
	implementation platform("io.awspring.cloud:spring-cloud-aws-dependencies:3.0.1")
	implementation 'io.awspring.cloud:spring-cloud-aws-starter-sqs'
	implementation 'redis.clients:jedis:4.0.1'
	implementation 'com.amazonaws:aws-lambda-java-core:1.2.1'
	implementation 'com.amazonaws:aws-lambda-java-events:3.11.0'
	implementation 'org.springframework.cloud:spring-cloud-function-adapter-aws:4.0.0'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
}

tasks.named('test') {
	useJUnitPlatform()
}
jar {
	manifest {
		attributes(
				'Manifest-Version': '1.0',
				'Main-Class': 'com.goormy.hackathon.HackathonApplication'
		)
	}
}


task buildZip(type: Zip) {
	from compileJava
	from processResources
	into('lib') {
		from configurations.runtimeClasspath
	}
	into('lib') {
		from jar.archiveFile
	}
	archiveFileName = 'lambda-function.zip'
	destinationDirectory = file("$buildDir/distributions")
}

build.dependsOn buildZip

